p,
'
function(el, x) {
d3.selectAll(".node text")
.filter(function(d) { return (["',c("TIL_Unique","Public"),'"].indexOf(d.name) > -1);})
.attr("text-anchor", "begin")
.attr("x", -30);
}
'
)
# Plot Sankey
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
fontSize = 10,
nodeWidth = 20,
fontFamily = 10,
sinksRight=F)
Source_group<-c("TIL_Unique","Public")
onRender(
p,
'
function(el, x) {
d3.selectAll(".node text")
.filter(function(d) { return (["',Source_group,'"].indexOf(d.name) > -1);})
.attr("text-anchor", "begin")
.attr("x", -30);
}
'
)
# Plot Sankey
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
fontSize = 10,
nodeWidth = 20,
fontFamily = 10,
sinksRight=F)
Source_group<-c("TIL_Unique","Public")
onRender(
p,
'
function(el, x) {
d3.selectAll(".node text")
.filter(function(d) { return (Source_group.indexOf(d.name) > -1);})
.attr("text-anchor", "begin")
.attr("x", -30);
}
'
)
# Plot Sankey
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
fontSize = 10,
nodeWidth = 20,
fontFamily = 10,
sinksRight=F)
Source_group<-c("TIL_Unique","Public")
onRender(
p,
'
function(el, x) {
d3.selectAll(".node text")
.filter(function(d) { return (Source_group.indexOf(d.name) > -1);})
.attr("text-anchor", "end")
.attr("x", -30);
}
'
)
# Plot Sankey
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
fontSize = 10,
nodeWidth = 20,
fontFamily = 10,
sinksRight=F)
Source_group<-c("TIL_Unique","Public")
onRender(
p,
'
function(el, x) {
d3.selectAll(".node text")
.filter(function(d) { return ( ["',paste0(Source_group,collapse = '","'),'"] .indexOf(d.name) > -1);})
.attr("text-anchor", "end")
.attr("x", -30);
}
'
)
# Plot Sankey
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
fontSize = 10,
nodeWidth = 20,
fontFamily = 10,
sinksRight=F)
Source_group<-c("TIL_Unique","Public")
onRender(
p,
'
function(el, x) {
d3.selectAll(".node text")
.filter(function(d) { return d.name.startsWith("Public"); })
.attr("text-anchor", "end")
.attr("x", -30);
}
'
)
# Plot Sankey
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
fontSize = 10,
nodeWidth = 20,
fontFamily = 10,
sinksRight=F)
Source_group<-c("TIL_Unique","Public")
onRender(
p,
'
function(el, x) {
d3.selectAll(".node text")
.filter(function(d) { return d.name.startsWith("Public"); })
.attr("text-anchor", "begin")
.attr("x", -30);
}
'
)
# Plot Sankey
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
fontSize = 10,
nodeWidth = 20,
fontFamily = 10,
sinksRight=F)
Source_group<-c("TIL_Unique","Public")
onRender(
p,
'
function(el, x) {
d3.selectAll(".node text")
.filter(function(d) { return d.name.startsWith("Public")&d.name.startsWith("TIL_Unique"); })
.attr("text-anchor", "begin")
.attr("x", -30);
}
'
)
# Plot Sankey
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
fontSize = 10,
nodeWidth = 20,
fontFamily = 10,
sinksRight=F)
Source_group<-c("TIL_Unique","Public")
onRender(
p,
'
function(el, x) {
d3.selectAll(".node text")
.filter(function(d) { return d.name.startsWith("Public"); })
.attr("text-anchor", "begin")
.attr("x", -30);
d3.selectAll(".node text")
.filter(function(d) { return d.name.startsWith("TIL_Unique"); })
.attr("text-anchor", "begin")
.attr("x", -30);
}
'
)
# Plot Sankey
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
fontSize = 10,
nodeWidth = 20,
fontFamily = 10,
sinksRight=F)
Source_group<-c("TIL_Unique","Public")
onRender(
p,
'
function(el, x) {
d3.selectAll(".node text")
.filter(function(d) { return d.name.startsWith("Public"); })
.attr("text-anchor", "begin")
.attr("x", -30);
d3.selectAll(".node text")
.filter(function(d) { return d.name.startsWith("TIL_Unique"); })
.attr("text-anchor", "end")
.attr("x", -2);
}
'
)
saveWidget(p, file=paste0( getwd(), "/sankey.html"))
p
saveWidget(p, file=paste0( getwd(), "/sankey.html"))
# Plot Sankey
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
fontSize = 10,
nodeWidth = 20,
fontFamily = 10,
sinksRight=F)
Source_group<-c("TIL_Unique","Public")
onRender(
p,
'
function(el, x) {
d3.selectAll(".node text")
.filter(function(d) { return d.name.startsWith("Public"); })
.attr("text-anchor", "begin")
.attr("x", -30);
d3.selectAll(".node text")
.filter(function(d) { return d.name.startsWith("TIL_Unique"); })
.attr("text-anchor", "end")
.attr("x", -2);
}
'
)
# Plot Sankey
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
fontSize = 10,
nodeWidth = 20,
fontFamily = 10,
sinksRight=F)
SankeyPlot<-onRender(
p,
'
function(el, x) {
d3.selectAll(".node text")
.filter(function(d) { return d.name.startsWith("Public"); })
.attr("text-anchor", "begin")
.attr("x", -30);
d3.selectAll(".node text")
.filter(function(d) { return d.name.startsWith("TIL_Unique"); })
.attr("text-anchor", "end")
.attr("x", -2);
}
'
)
SankeyPlot
saveWidget(SankeyPlot, file=paste0( getwd(), "/sankey.html"))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(Seurat)
library(stringr)
library(tidyr)
library(patchwork)
library(pheatmap)
library(readxl)
library(immunarch)
library(circlize)
library(networkD3)
library(htmlwidgets)
Shared_Surface_TCR<-read.csv('Y:/Files/JHU/Labs/Git_Repos/COVID19_Cross_Reference/Data/Output/M1_Common_Surface.csv',
sep = '\t')
View(Shared_Surface_TCR)
Shared_Surface_TCR<-read.csv('Y:/Files/JHU/Labs/Git_Repos/COVID19_Cross_Reference/Data/Output/M1_Common_Surface.csv')
View(Shared_Surface_TCR)
Shared_Surface_TCR[Shared_Surface_TCR==""] <-"N.A."
V_list<-unique(Shared_Surface_TCR$V)
J_list<-unique(Shared_Surface_TCR$J)
ad_mtx<-matrix(0,length(V_list),length(J_list)) #Rows-->V; Columns-->J
rownames(ad_df)<-V_list
Shared_Surface_TCR[Shared_Surface_TCR==""] <-"N.A."
V_list<-unique(Shared_Surface_TCR$V)
J_list<-unique(Shared_Surface_TCR$J)
ad_mtx<-matrix(0,length(V_list),length(J_list)) #Rows-->V; Columns-->J
rownames(ad_mtx)<-V_list
colnames(ad_mtx)<-J_list
for (vgene in V_list) {
for (jgene in J_list) {
temp_df<-filter(ad_df,V ==vgene & J == jgene)
ad_mtx[vgene,jgene] <-nrow(temp_df)
}
}
Shared_Surface_TCR[Shared_Surface_TCR==""] <-"N.A."
V_list<-unique(Shared_Surface_TCR$V)
J_list<-unique(Shared_Surface_TCR$J)
ad_mtx<-matrix(0,length(V_list),length(J_list)) #Rows-->V; Columns-->J
rownames(ad_mtx)<-V_list
colnames(ad_mtx)<-J_list
for (vgene in V_list) {
for (jgene in J_list) {
temp_df<-filter(ad_mtx,V ==vgene & J == jgene)
ad_mtx[vgene,jgene] <-nrow(temp_df)
}
}
Shared_Surface_TCR[Shared_Surface_TCR==""] <-"N.A."
V_list<-unique(Shared_Surface_TCR$V)
J_list<-unique(Shared_Surface_TCR$J)
ad_mtx<-matrix(0,length(V_list),length(J_list)) #Rows-->V; Columns-->J
rownames(ad_mtx)<-V_list
colnames(ad_mtx)<-J_list
for (vgene in V_list) {
for (jgene in J_list) {
temp_df<-filter(Shared_Surface_TCR,V ==vgene & J == jgene)
ad_mtx[vgene,jgene] <-nrow(temp_df)
}
}
View(ad_mtx)
VJ_genes<-c(V_list,J_list)
col_VJ<-rand_color( length(VJ_genes),luminosity = 'dark')
names(col_VJ)<-VJ_genes
png(file = "VJ_Usage", width = 1800, height = 1800)
par(mar=c(3,3,4,0))
grid_col <- col_VJ[c(rownames(VJ_matrices[[i]]),colnames(VJ_matrices[[i]]))]
png(file = "VJ_Usage", width = 1800, height = 1800)
par(mar=c(3,3,4,0))
grid_col <- col_VJ[c(rownames(ad_mtx),colnames(ad_mtx))]
chordDiagram(ad_mtx,
annotationTrack = "grid",
# big.gap = 10,
preAllocateTracks = 2,
grid.col = grid_col)
circos.trackPlotRegion(
track.index = 1,
panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
ylim = get.cell.meta.data("ylim")
sector.name = get.cell.meta.data("sector.index")
circos.text(
mean(xlim),
ylim[1] - 1,
sector.name,
facing = "clockwise",
niceFacing = TRUE,
adj = c(0, 0.5),
col = "#444541",
cex = 2
)
},
bg.border = NA
)
title(main = list("VJ_gene Usage of Cross-Reactive TCRs to SARS-CoV2 Spike Protein and M1",cex = 4), outer = F, line = -6)
abline(h = 0.02, lty = 2, col = "#00000080",lwd = 2)
circos.clear()
dev.off()
png(file = "VJ_Usage", width = 1800, height = 1800)
par(mar=c(3,3,4,0))
grid_col <- col_VJ[c(rownames(ad_mtx),colnames(ad_mtx))]
chordDiagram(ad_mtx,
annotationTrack = "grid",
# big.gap = 10,
preAllocateTracks = 2,
grid.col = grid_col)
circos.trackPlotRegion(
track.index = 1,
panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
ylim = get.cell.meta.data("ylim")
sector.name = get.cell.meta.data("sector.index")
circos.text(
mean(xlim),
ylim[1] - 1,
sector.name,
facing = "clockwise",
niceFacing = TRUE,
adj = c(0, 0.5),
col = "#444541",
cex = 2
)
},
bg.border = NA
)
title(main = list("VJ_gene Usage of Cross-Reactive TCRs to SARS-CoV2 Spike Protein and M1",cex = 4), outer = F, line = -6)
abline(h = 0.02, lty = 2, col = "#00000080",lwd = 2)
circos.clear()
dev.off()
getwd()
knitr::opts_knit$set(root.dir = 'Y:/Files/JHU/Labs/Git_Repos/COVID19_Cross_Reference')
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = 'Y:/Files/JHU/Labs/Git_Repos/COVID19_Cross_Reference')
getwd
getwd()
setwd("Y:/Files/JHU/Labs/Git_Repos/COVID19_Cross_Reference")
getwd()
View(Shared_Surface_TCR)
table(Shared_Surface_TCR$Experiment)
png(file = "VJ_Usage.png", width = 1800, height = 1800)
par(mar=c(3,3,4,0))
grid_col <- col_VJ[c(rownames(ad_mtx),colnames(ad_mtx))]
chordDiagram(ad_mtx,
annotationTrack = "grid",
# big.gap = 10,
preAllocateTracks = 2,
grid.col = grid_col)
circos.trackPlotRegion(
track.index = 1,
panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
ylim = get.cell.meta.data("ylim")
sector.name = get.cell.meta.data("sector.index")
circos.text(
mean(xlim),
ylim[1] - 1,
sector.name,
facing = "clockwise",
niceFacing = TRUE,
adj = c(0, 0.5),
col = "#444541",
cex = 2
)
},
bg.border = NA
)
title(main = list("VJ Gene Usage of 331 Cross-Reactive TCRs to SARS-CoV2 Spike Protein and M1",cex = 4), outer = F, line = -6)
abline(h = 0.02, lty = 2, col = "#00000080",lwd = 2)
circos.clear()
dev.off()
png(file = "VJ_Usage.png", width = 1800, height = 1800)
par(mar=c(3,3,4,0))
grid_col <- col_VJ[c(rownames(ad_mtx),colnames(ad_mtx))]
chordDiagram(ad_mtx,
annotationTrack = "grid",
# big.gap = 10,
preAllocateTracks = 2,
grid.col = grid_col)
circos.trackPlotRegion(
track.index = 1,
panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
ylim = get.cell.meta.data("ylim")
sector.name = get.cell.meta.data("sector.index")
circos.text(
mean(xlim),
ylim[1] - 1,
sector.name,
facing = "clockwise",
niceFacing = TRUE,
adj = c(0, 0.5),
col = "#444541",
cex = 2
)
},
bg.border = NA
)
title(main = list("VJ Gene Usage--331 Cross-Reactive TCRs to SARS-CoV2 Spike Protein and M1",cex = 4), outer = F, line = -6)
abline(h = 0.02, lty = 2, col = "#00000080",lwd = 2)
circos.clear()
dev.off()
png(file = "VJ_Usage.png", width = 1800, height = 1800)
par(mar=c(3,3,4,0))
grid_col <- col_VJ[c(rownames(ad_mtx),colnames(ad_mtx))]
chordDiagram(ad_mtx,
annotationTrack = "grid",
# big.gap = 10,
preAllocateTracks = 2,
grid.col = grid_col)
circos.trackPlotRegion(
track.index = 1,
panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
ylim = get.cell.meta.data("ylim")
sector.name = get.cell.meta.data("sector.index")
circos.text(
mean(xlim),
ylim[1] - 1,
sector.name,
facing = "clockwise",
niceFacing = TRUE,
adj = c(0, 0.5),
col = "#444541",
cex = 2
)
},
bg.border = NA
)
title(main = list("VJ Gene Usage--331 Cross-Reactive TCRs to \t SARS-CoV2 Spike Protein and M1",cex = 4), outer = F, line = -6)
abline(h = 0.02, lty = 2, col = "#00000080",lwd = 2)
circos.clear()
dev.off()
png(file = "VJ_Usage.png", width = 1800, height = 1800)
png(file = "VJ_Usage.png", width = 1800, height = 1800)
par(mar=c(3,3,4,0))
grid_col <- col_VJ[c(rownames(ad_mtx),colnames(ad_mtx))]
chordDiagram(ad_mtx,
annotationTrack = "grid",
# big.gap = 10,
preAllocateTracks = 2,
grid.col = grid_col)
circos.trackPlotRegion(
track.index = 1,
panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
ylim = get.cell.meta.data("ylim")
sector.name = get.cell.meta.data("sector.index")
circos.text(
mean(xlim),
ylim[1] - 1,
sector.name,
facing = "clockwise",
niceFacing = TRUE,
adj = c(0, 0.5),
col = "#444541",
cex = 2
)
},
bg.border = NA
)
title(main = list("VJ Gene Usage--331 Cross-Reactive TCRs to \n SARS-CoV2 Spike Protein and M1",cex = 4), outer = F, line = -6)
abline(h = 0.02, lty = 2, col = "#00000080",lwd = 2)
circos.clear()
dev.off()
