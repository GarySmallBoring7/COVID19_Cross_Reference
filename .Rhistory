M1<-read.csv("Data/VDJdb_M1_TCR.tsv",sep = "\t")
# Read and rearrange M1 and MART1 data
M1<-read.csv("Data/VDJdb_M1_TCR_Paired.tsv",sep = "\t")
# Read and rearrange M1 and MART1 data
M1<-read.csv("Data/VDJdb_M1_TCR.tsv",sep = "\t")
# Read and rearrange M1 and MART1 data
M1<-read.csv("Data/VDJdb_M1_TCR_Paired.tsv",sep = "\t")
MART1<-read.csv("Data/VDJdb_MART1_TCR.tsv",sep = "\t")
M1<-unique(rearrange_VDJdb(M1,peptide = "GILGFVFTL"))
View(M1)
rearrange_VDJdb<-function(df,peptide = NA){
df<-df[grep(peptide,df$Epitope,fixed = T),]
df<-subset(df,df$Gene=="TRB"|df$Gene=="TRA")
names(df)[which(names(df)=="CDR3")]<-"amino_acid"
names(df)[which(names(df)=="V")]<-"v_resolved"
names(df)[which(names(df)=="J")]<-"j_resolved"
df<-select(df,c(1:13,17)) # Include the last score column
}
# Read and rearrange M1 and MART1 data
M1<-read.csv("Data/VDJdb_M1_TCR_Paired.tsv",sep = "\t")
M1<-unique(rearrange_VDJdb(M1,peptide = "GILGFVFTL"))
# Read ImmuneCODE data
ImmuneCODE_raw<-rbind(read.csv("Data/peptide-detail-ci.csv"),
read.csv("Data/peptide-detail-cii.csv"))
ImmuneCODE<-rearrange_ImmuneCODE(ImmuneCODE_raw)
LLL<-unique(ImmuneCODE[grep("LLLDRLNQL",ImmuneCODE$Epitope,fixed = T),])
LLY<-unique(ImmuneCODE[grep("LLYDANYFL",ImmuneCODE$Epitope,fixed = T),])
View(M1)
#### Cross reference by exact match ####
LLL_M1_complex.id <- M1$complex.id[which(M1$amino_acid %in% LLL$amino_acid)]
LLL_M1<- subset(M1, M1$complex.id %in% LLL_M1_complex.id)
View(LLL_M1)
#MART1_M1 <-subset(MART1,MART1$amino_acid%in% M1$amino_acid)
#MART1_LLL<-subset(MART1,MART1$amino_acid%in% LLL$amino_acid)
SARS_M1 <-subset(ImmuneCODE, amino_acid %in% M1$amino_acid)
View(SARS_M1)
#MART1_M1 <-subset(MART1,MART1$amino_acid%in% M1$amino_acid)
#MART1_LLL<-subset(MART1,MART1$amino_acid%in% LLL$amino_acid)
M1_SARS <-subset(M1, amino_acid %in% ImmuneCODE$amino_acid)
View(M1_SARS)
LLY_M1_complex.id <- M1$complex.id[which(M1$amino_acid %in% LLY$amino_acid)]
LLY_M1<- subset(M1, M1$complex.id %in% LLY_M1_complex.id)
View(LLY_M1)
write.csv(LLL_M1,"LLL_M1_pairedAB.csv")
write.csv(LLY_M1,"LLY_M1_pairedAB.csv")
# LLY:  LLYDANYFL
library(dplyr)
library(stringr)
library(tidyr)
library(patchwork)
library(immunarch)
library(circlize)
library(networkD3)
library(htmlwidgets)
library(hrbrthemes)
library(ggalluvial)
library(tidyverse)
library(ggpubr)
library(viridis)
library(dplyr)
library(stringr)
library(tidyr)
library(patchwork)
library(immunarch)
library(circlize)
library(networkD3)
library(htmlwidgets)
library(hrbrthemes)
library(ggalluvial)
library(tidyverse)
library(ggpubr)
library(viridis)
#### Functions ####
rearrange_ImmuneCODE<-function(df,select = F){
df<-separate(df,col = "TCR.BioIdentity",
sep = "\\+",
into = c("amino_acid","v_resolved","j_resolved"),
remove = T)
names(df)[which(names(df)=="Amino.Acids")]<-"Epitope"
if(select == T) df<-select(df,"amino_acid","v_resolved","j_resolved","Epitope")
df<-subset(df, amino_acid!= "unproductive" )
unique(df)
}
rearrange_VDJdb<-function(df,peptide = NA){
df<-df[grep(peptide,df$Epitope,fixed = T),]
df<-subset(df,df$Gene=="TRB"|df$Gene=="TRA") # Include TRA
names(df)[which(names(df)=="CDR3")]<-"amino_acid"
names(df)[which(names(df)=="V")]<-"v_resolved"
names(df)[which(names(df)=="J")]<-"j_resolved"
df<-select(df,c(1:13,17)) # Include the last score column
}
reformat_iSMART<-function(df,output_dir = NA,split = F,sample = "All"){
# Split will split the df according to sample_name. Here no sample_name is needed.
# Input file format (in the order of columns):
# CDR3 amino acid sequence (Starting from C, ending with the first F/L in motif [FL]G.)
# Variable gene name in Imgt format: TRBVXX-XX*XX
# Joining gene name (optional)
# Frequency (optional)
# Other information (optional)
if(split==F) {
df_new <-
select(df,
amino_acid,
v_resolved,
j_resolved,
productive_frequency,
sample_name)
if (!is.na(output_dir)) {
write.table(
df_new,
file = paste0(output_dir, "/", sample, "_iSMART.tsv"),
row.names = FALSE,
sep = "\t",
quote = FALSE,
col.names=TRUE
)
}
}else if(split==T){
sample_list<-unique(df$sample_name)
for(i in 1:length(sample_list)){
df_temp<-subset(df,sample_name==sample_list[i])
reformat_iSMART(df,output_dir = output_dir,split = F,sample = sample_list[i])
}
}
}
#### Read and process raw data ####
setwd("Y:/Files/JHU/Labs/Git_Repos/COVID19_Cross_Reference")
# Read and rearrange M1 and MART1 data
M1<-read.csv("Data/VDJdb_M1_TCR_Paired.tsv",sep = "\t")
M1<-unique(rearrange_VDJdb(M1,peptide = "GILGFVFTL"))
# Read ImmuneCODE data
ImmuneCODE_raw<-rbind(read.csv("Data/peptide-detail-ci.csv"),
read.csv("Data/peptide-detail-cii.csv"))
ImmuneCODE<-rearrange_ImmuneCODE(ImmuneCODE_raw)
LLL<-unique(ImmuneCODE[grep("LLLDRLNQL",ImmuneCODE$Epitope,fixed = T),])
LLY<-unique(ImmuneCODE[grep("LLYDANYFL",ImmuneCODE$Epitope,fixed = T),])
LLL_M1_complex.id <- M1$complex.id[which(M1$amino_acid %in% LLL$amino_acid)]
LLL_M1<- subset(M1, M1$complex.id %in% LLL_M1_complex.id)
LLY_M1_complex.id <- M1$complex.id[which(M1$amino_acid %in% LLY$amino_acid)]
LLY_M1<- subset(M1, M1$complex.id %in% LLY_M1_complex.id)
M1_SARS <-subset(M1, amino_acid %in% ImmuneCODE$amino_acid)
## Output peptide list ##
Peptide<-as.data.frame(table(SARS_M1$Epitope))
## Output peptide list ##
Peptide<-as.data.frame(table(M1_SARS$Epitope))
View(Peptide)
SARS_M1 <-subset(ImmuneCODE, amino_acid %in% M1$amino_acid) # In terms of ImmuneCODE entries
## Output peptide list ##
Peptide<-as.data.frame(table(SARS_M1$Epitope))
View(Peptide)
View(LLL)
View(LLL)
#### Cross reference by Similarity Match ####
# Combine M1 and SARS-CoV 2 data together and perform clustering first
# LLL$Epitope <- "LLL"
# LLY$Epitope <- "LLY"
# M1$Epitope <- "M1"
All<-rbind(select(ImmuneCODE,c("amino_acid","v_resolved","j_resolved","Epitope")),
select(M1,c("amino_acid","v_resolved","j_resolved","Epitope")))
View(All)
View(ImmuneCODE)
write.table(
All,
file = paste0("Data/Output/GIANA", "/", "all", "_GIANA.tsv"),
row.names = FALSE,
sep = "\t",
quote = FALSE,
col.names=TRUE
)
# MART1: ELAGIGILTV
# M1:   GILGFVFTL
# LLL:  LLLDRLNQL
# LLY:  LLYDANYFL
library(dplyr)
library(stringr)
library(tidyr)
library(patchwork)
library(immunarch)
library(circlize)
library(networkD3)
library(htmlwidgets)
library(hrbrthemes)
library(ggalluvial)
library(tidyverse)
library(ggpubr)
library(viridis)
#### Read and process raw data ####
setwd("Y:/Files/JHU/Labs/Git_Repos/COVID19_Cross_Reference")
## Read cluster results
cluster_result <- read.table("Data/Output/GIANA/all_GIANA--RotationEncodingBL62", sep = " ")
## Read cluster results
cluster_result <- read.table("Data/Output/GIANA/all_GIANA--RotationEncodingBL62.txt", sep = " ")
View(cluster_result)
## Read cluster results
cluster_result <- read.table("Data/Output/GIANA/all_GIANA--RotationEncodingBL62.txt", sep = "\t")
View(cluster_result)
colnames(cluster_result)<-c("amino_acid","clusterID","v_resolved","j_resolved","Epitope")
# Find the clusters containing the identified exact match TCRs
LLL_cross_reactive_cluster_ID <- subset(cluster_result, amino_acid %in% LLL_M1$amino_acid)
View(LLL_cross_reactive_cluster_ID)
View(LLL_M1)
View(LLL_M1)
View(cluster_result)
View(LLL_M1)
# Find the clusters containing the identified exact match TCRs
LLL_cross_reactive_cluster_ID <- subset(cluster_result, amino_acid %in% subset(LLL_M1, Gene == "TRB")$amino_acid)
View(LLL_cross_reactive_cluster_ID)
length(unique(All$amino_acid))
## Read cluster results
cluster_result <- read.table("Data/Output/GIANA/all_GIANA--RotationEncodingBL62.txt", sep = "\t")
colnames(cluster_result)<-c("amino_acid","clusterID","v_resolved","j_resolved","Epitope")
# Find the clusters containing the identified exact match TCRs
LLL_cross_reactive_cluster_ID <- subset(cluster_result, amino_acid %in% subset(LLL_M1, Gene == "TRB")$amino_acid)
View(LLL_cross_reactive_cluster_ID)
## This is the R script to perform cross-reference with paired TRA-TRB info for cloning TCR
## VDJdb contains paired TRA-TRB information, whereas ImmuneCODE does not.
#### Peptides ####
# MART1: ELAGIGILTV
# M1:   GILGFVFTL
# LLL:  LLLDRLNQL
# LLY:  LLYDANYFL
library(dplyr)
library(stringr)
library(tidyr)
library(patchwork)
library(immunarch)
library(circlize)
library(networkD3)
library(htmlwidgets)
library(hrbrthemes)
library(ggalluvial)
library(tidyverse)
library(ggpubr)
library(viridis)
# Output into iSMART folder.
write.table(
All,
file = paste0("Data/Output/iSMART", "/", "all", "_iSMART.tsv"),
row.names = FALSE,
sep = "\t",
quote = FALSE,
col.names=TRUE
)
library(dplyr)
library(stringr)
library(tidyr)
library(patchwork)
library(immunarch)
library(circlize)
library(networkD3)
library(htmlwidgets)
library(hrbrthemes)
library(ggalluvial)
library(tidyverse)
library(ggpubr)
library(viridis)
View(LLL_M1)
## Read cluster results
cluster_result <- read.table("Data/Output/GIANA/all_GIANA--RotationEncodingBL62.txt", sep = "\t")
colnames(cluster_result)<-c("amino_acid","clusterID","v_resolved","j_resolved","Epitope")
# Find the clusters containing the identified exact match TCRs
LLL_cross_reactive_cluster_ID <- subset(cluster_result, amino_acid %in% subset(LLL_M1, Gene == "TRB")$amino_acid)
View(LLL_cross_reactive_cluster_ID)
# Find the clusters containing the identified exact match TCRs
LLL_cross_reactive_cluster_ID <- subset(cluster_result, amino_acid %in% subset(LLL_M1, Gene == "TRB")$amino_acid)$clusterID
LLL_cross_reactive_cluster <-subset(cluster_result, clusterID %in% LLL_cross_reactive_cluster_ID)
View(LLL_cross_reactive_cluster)
LLL_cross_reactive_cluster <-unique(subset(cluster_result, clusterID %in% LLL_cross_reactive_cluster_ID))
View(LLL_cross_reactive_cluster)
LLL_cross_reactive_cluster[grep("LLYDANYFL",LLL_cross_reactive_cluster$Epitope,fixed = T),]
LLL_cross_reactive_similar<- LLL_cross_reactive_cluster[grep("LLYDANYFL",LLL_cross_reactive_cluster$Epitope,fixed = T),]
View(LLL_cross_reactive_similar)
View(LLL_M1)
library(dplyr)
library(stringr)
library(tidyr)
library(patchwork)
library(immunarch)
library(circlize)
library(networkD3)
library(htmlwidgets)
library(hrbrthemes)
library(ggalluvial)
library(tidyverse)
library(ggpubr)
library(viridis)
M1_cross_reactive_similar<- LLL_cross_reactive_cluster[grep("GILGFVFTL",LLL_cross_reactive_cluster$Epitope,fixed = T),]
View(M1_cross_reactive_similar)
## This is the R script to perform cross-reference with paired TRA-TRB info for cloning TCR
## VDJdb contains paired TRA-TRB information, whereas ImmuneCODE does not.
#### Peptides ####
# MART1: ELAGIGILTV
# M1:   GILGFVFTL
# LLL:  LLLDRLNQL
# LLY:  LLYDANYFL
library(Biostrings)
browseVignettes("Biostrings")
# Plot tree diagram for similar TCRs in LLL dataset
pairwiseAlignment(pattern = LLL_cross_reactive_similar$amino_acid[1],subject = LLL_cross_reactive_similar$amino_acid[2],type = 'local')
# Plot tree diagram for similar TCRs in LLL dataset
pairwiseAlignment(pattern = LLL_cross_reactive_similar$amino_acid[1],subject = LLL_cross_reactive_similar$amino_acid[2], substitutionMatrix = "BLOSUM62", gapOpening = 3, gapExtension = 1)
# Plot tree diagram for similar TCRs in LLL dataset
pairwiseAlignment(pattern = LLL_cross_reactive_similar$amino_acid[1],subject = LLL_cross_reactive_similar$amino_acid[2], substitutionMatrix = "BLOSUM62", gapOpening = 6, gapExtension = 1)
# Plot tree diagram for similar TCRs in LLL dataset
pairwiseAlignment(pattern = LLL_cross_reactive_similar$amino_acid[1],subject = LLL_cross_reactive_similar$amino_acid[3], substitutionMatrix = "BLOSUM62", gapOpening = 6, gapExtension = 1)
# Plot tree diagram for similar TCRs in LLL dataset
pairwiseAlignment(pattern = LLL_cross_reactive_similar$amino_acid[1],subject = LLL_cross_reactive_similar$amino_acid[5], substitutionMatrix = "BLOSUM62", gapOpening = 6, gapExtension = 1)
# Plot tree diagram for similar TCRs in LLL dataset
pairwiseAlignment(pattern = LLL_cross_reactive_similar$amino_acid[1],subject = LLL_cross_reactive_similar$amino_acid[8], substitutionMatrix = "BLOSUM62", gapOpening = 6, gapExtension = 1)
# Plot tree diagram for similar TCRs in LLL dataset
pairwiseAlignment(pattern = LLL_cross_reactive_similar$amino_acid[1],subject = LLL_cross_reactive_similar$amino_acid[2], substitutionMatrix = "BLOSUM62", gapOpening = 6, gapExtension = 1)
# Plot tree diagram for similar TCRs in LLL dataset
pairwiseAlignment(pattern = LLL_cross_reactive_similar$amino_acid[1],subject = LLL_cross_reactive_similar$amino_acid[12], substitutionMatrix = "BLOSUM62", gapOpening = 6, gapExtension = 1)
# Plot tree diagram for similar TCRs in LLL dataset
pairwiseAlignment(pattern = LLL_cross_reactive_similar$amino_acid[1],subject = LLL_cross_reactive_similar$amino_acid[12], type= 'local',substitutionMatrix = "BLOSUM62", gapOpening = 6, gapExtension = 1)
# Plot tree diagram for similar TCRs in LLL dataset
pairwiseAlignment(pattern = LLL_cross_reactive_similar$amino_acid[1],subject = LLL_cross_reactive_similar$amino_acid[12], type= 'local',substitutionMatrix = "BLOSUM62", gapOpening = 6, gapExtension =6)
# Plot tree diagram for similar TCRs in LLL dataset
pairwiseAlignment(pattern = LLL_cross_reactive_similar$amino_acid[1],subject = LLL_cross_reactive_similar$amino_acid[2], type= 'local',substitutionMatrix = "BLOSUM62", gapOpening = 6, gapExtension =6)
data("BLOSUM62")
View(BLOSUM62)
View(BLOSUM62)
BLOSUM62[A][R]
BLOSUM62[A,R]
BLOSUM62['A']
names(BLOSUM62)
colnames(BLOSUM62)
BLOSUM62['A']['A']
BLOSUM62['A']['R']
BLOSUM62
BLOSUM62[['A']]
BLOSUM62['A']
BLOSUM62[1,2]
# Plot tree diagram for similar TCRs in LLL dataset
pairwiseAlignment(pattern = LLL_cross_reactive_similar$amino_acid[1],subject = LLL_cross_reactive_similar$amino_acid[12], type= 'local',substitutionMatrix = "BLOSUM62", gapOpening = 6, gapExtension =6)
# Plot tree diagram for similar TCRs in LLL dataset
pairwiseAlignment(pattern = LLL_cross_reactive_similar$amino_acid[1],subject = LLL_cross_reactive_similar$amino_acid[12], type= 'local',substitutionMatrix = "BLOSUM62", gapOpening = 16, gapExtension =6)
# Plot tree diagram for similar TCRs in LLL dataset
pairwiseAlignment(pattern = LLL_cross_reactive_similar$amino_acid[1],subject = LLL_cross_reactive_similar$amino_acid[12], type= 'local',substitutionMatrix = "BLOSUM62", gapOpening = 6, gapExtension = 16)
# Plot tree diagram for similar TCRs in LLL dataset
pairwiseAlignment(pattern = LLL_cross_reactive_similar$amino_acid[1],subject = LLL_cross_reactive_similar$amino_acid[12], type= 'local',substitutionMatrix = "BLOSUM62", gapOpening = 6, gapExtension = -16)
# Plot tree diagram for similar TCRs in LLL dataset
pairwiseAlignment(pattern = LLL_cross_reactive_similar$amino_acid[1],subject = LLL_cross_reactive_similar$amino_acid[12], type= 'local',substitutionMatrix = "BLOSUM62", gapOpening = 6, gapExtension = 6)
# Plot tree diagram for similar TCRs in LLL dataset
pairwiseAlignment(AAstring(LLL_cross_reactive_similar$amino_acid[1]),subject = AAstring(LLL_cross_reactive_similar$amino_acid[12]), type= 'local',substitutionMatrix = "BLOSUM62", gapOpening = 6, gapExtension = 6)
# Plot tree diagram for similar TCRs in LLL dataset
pairwiseAlignment(AAString(LLL_cross_reactive_similar$amino_acid[1]),subject = AAString(LLL_cross_reactive_similar$amino_acid[12]), type= 'local',substitutionMatrix = "BLOSUM62", gapOpening = 6, gapExtension = 6)
# Plot tree diagram for similar TCRs in LLL dataset
pairwiseAlignment(AAString(LLL_cross_reactive_similar$amino_acid[1]),subject = AAString(LLL_cross_reactive_similar$amino_acid[2]), type= 'local',substitutionMatrix = "BLOSUM62", gapOpening = 6, gapExtension = 6)
# Plot tree diagram for similar TCRs in LLL dataset
pairwiseAlignment(
AAString(LLL_cross_reactive_similar$amino_acid),
subject = AAString(LLL_cross_reactive_similar$amino_acid),
type = 'local',
substitutionMatrix = "BLOSUM62",
gapOpening = 6,
gapExtension = 6
)
# Plot tree diagram for similar TCRs in LLL dataset
pairwiseAlignment(
AAString(LLL_cross_reactive_similar$amino_acid),
subject = AAString(LLL_cross_reactive_similar$amino_acid),
type = 'local',
substitutionMatrix = "BLOSUM62",
gapOpening = 6,
gapExtension = 6,
scoreOnly = T
)
# Plot tree diagram for similar TCRs in LLL dataset
pairwiseAlignment(
AAString(LLL_cross_reactive_similar$amino_acid[1]),
subject = AAString(LLL_cross_reactive_similar$amino_acid)[2],
type = 'local',
substitutionMatrix = "BLOSUM62",
gapOpening = 6,
gapExtension = 6,
scoreOnly = T
)
# Plot tree diagram for similar TCRs in LLL dataset
pairwiseAlignment(
AAString(LLL_cross_reactive_similar$amino_acid[1]),
subject = AAString(LLL_cross_reactive_similar$amino_acid[2]),
type = 'local',
substitutionMatrix = "BLOSUM62",
gapOpening = 6,
gapExtension = 6,
scoreOnly = T
)
## Plot tree diagram for similar TCRs in LLL dataset
# Score matrix for TCRs in LLL_cross_reactive_similar
score_mat <- data.frame(matrix(0,nrow(LLL_cross_reactive_similar),nrow(LLL_cross_reactive_similar)))
View(score_mat)
colnames(score_mat)<-LLL_cross_reactive_similar$amino_acid
rownames(score_mat)<-LLL_cross_reactive_similar$amino_acid
View(score_mat)
for (i in 1:nrow(score_mat)) {
for (j in 1:nrow(score_mat)) {
score_mat[i][j] <- pairwiseAlignment(
AAString(LLL_cross_reactive_similar$amino_acid[i]),
subject = AAString(LLL_cross_reactive_similar$amino_acid[j]),
type = 'local',
substitutionMatrix = "BLOSUM62",
gapOpening = 6,
gapExtension = 6,
scoreOnly = T
)
}
}
View(score_mat)
View(LLL_cross_reactive_similar)
for (i in 1:nrow(score_mat)) {
for (j in 1:nrow(score_mat)) {
score_mat[i,j] <- pairwiseAlignment(
AAString(LLL_cross_reactive_similar$amino_acid[i]),
subject = AAString(LLL_cross_reactive_similar$amino_acid[j]),
type = 'local',
substitutionMatrix = "BLOSUM62",
gapOpening = 6,
gapExtension = 6,
scoreOnly = T
)
}
}
View(score_mat)
# Hierarchical clustering using Complete Linkage
hc1 <- hclust(score_mat, method = "complete" )
d <- dist(score_mat, method = "euclidean")
# Hierarchical clustering using Complete Linkage
hc1 <- hclust(d, method = "complete" )
# Plot the obtained dendrogram
plot(hc1, cex = 0.6, hang = -1)
# Hierarchical clustering using Complete Linkage
hc1 <- hclust(d, method = "average" )
# Plot the obtained dendrogram
plot(hc1, cex = 0.6, hang = -1)
d
d <- as.dist(score_mat)
# Hierarchical clustering using Complete Linkage
hc1 <- hclust(d, method = "average" )
# Plot the obtained dendrogram
plot(hc1, cex = 0.6, hang = -1)
View(score_mat)
d <- as.dist(sqrt(100-score_mat))
# Hierarchical clustering using Complete Linkage
hc1 <- hclust(d, method = "average" )
# Plot the obtained dendrogram
plot(hc1, cex = 0.6, hang = -1)
d <- as.dist(log(100-score_mat))
# Hierarchical clustering using Complete Linkage
hc1 <- hclust(d, method = "average" )
# Plot the obtained dendrogram
plot(hc1, cex = 0.6, hang = -1)
d <- as.dist(sqrt(100-score_mat))
# Hierarchical clustering using Complete Linkage
hc1 <- hclust(d, method = "average" )
# Plot the obtained dendrogram
plot(hc1, cex = 0.6, hang = -1)
d
d <- as.dist(sqrt(1-score_mat/max(score_mat)))
# Hierarchical clustering using Complete Linkage
hc1 <- hclust(d, method = "average" )
# Plot the obtained dendrogram
plot(hc1, cex = 0.6, hang = -1)
normalize(score_mat)
scale(score_mat)
d <- as.dist(sqrt(1-scale(score_mat)))
d <- as.dist((1-scale(score_mat)))
# Hierarchical clustering using Complete Linkage
hc1 <- hclust(d, method = "average" )
# Plot the obtained dendrogram
plot(hc1, cex = 0.6, hang = -1)
d <- as.dist((2-scale(score_mat)))
# Hierarchical clustering using Complete Linkage
hc1 <- hclust(d, method = "average" )
# Plot the obtained dendrogram
plot(hc1, cex = 0.6, hang = -1)
# Plot the obtained dendrogram
plot(as.phylo(hc1), type = "fan")
library(ape)
# Plot the obtained dendrogram
plot(as.phylo(hc1), type = "fan")
# Plot the obtained dendrogram
plot(as.phylo(hc1), type = "fan",cex = 0.2)
# Plot the obtained dendrogram
plot(as.phylo(hc1), type = "fan",cex = 0.5)
# Plot the obtained dendrogram
plot(as.phylo(hc1),cex = 0.5)
# Plot the obtained dendrogram
plot(as.phylo(hc1),cex = 1)
# Hierarchical clustering using Complete Linkage
hc1 <- hclust(d, method = "average" )
clus4 = cutree(hc1, 4)# Plot the obtained dendrogram
clus5 = cutree(hc1, 5)# Plot the obtained dendrogram
# Plot the obtained dendrogram
plot(as.phylo(hc1),cex = 1,color = color_palette('set1')[clus5])
source('Y:/Files/JHU/Labs/Git_Repos/COVID19_Cross_Reference/Cross_Reference_Paired.R', echo=TRUE)
scale_colour_brewer(palette = "Set1")
display.brewer.all()
library(RColorBrewer)
display.brewer.all()
brewer.pal(5, 'set1')
brewer.pal(5, 'Set1')
# Plot the obtained dendrogram
plot(as.phylo(hc1),cex = 1,color = brewer.pal(5, 'Set1')[clus5])
# Hierarchical clustering using Complete Linkage
hc1 <- hclust(d, method = "average" )
clus5 = cutree(hc1, 5)
# Plot the obtained dendrogram
plot(as.phylo(hc1),cex = 1,color = brewer.pal(5, 'Set1')[clus5])
brewer.pal(5, 'Set1')
# Plot the obtained dendrogram
plot(as.phylo(hc1),cex = 1,tip.color = brewer.pal(5, 'Set1')[clus5])
